[{"/Users/mscbr/Documents/projects/em_chat/client/src/index.tsx":"1","/Users/mscbr/Documents/projects/em_chat/client/src/reportWebVitals.ts":"2","/Users/mscbr/Documents/projects/em_chat/client/src/App.tsx":"3","/Users/mscbr/Documents/projects/em_chat/client/src/theme/index.ts":"4","/Users/mscbr/Documents/projects/em_chat/client/src/pages/chat/index.tsx":"5","/Users/mscbr/Documents/projects/em_chat/client/src/pages/login/index.tsx":"6","/Users/mscbr/Documents/projects/em_chat/client/src/hooks/useLocalStorage.ts":"7","/Users/mscbr/Documents/projects/em_chat/client/src/hooks/useChat.ts":"8","/Users/mscbr/Documents/projects/em_chat/client/src/components/userList/index.tsx":"9","/Users/mscbr/Documents/projects/em_chat/client/src/components/videoFeedback/index.tsx":"10","/Users/mscbr/Documents/projects/em_chat/client/src/components/messageInput/index.tsx":"11","/Users/mscbr/Documents/projects/em_chat/client/src/components/messageList/index.tsx":"12","/Users/mscbr/Documents/projects/em_chat/client/src/components/userList/user.tsx":"13","/Users/mscbr/Documents/projects/em_chat/client/src/components/messageList/message.tsx":"14","/Users/mscbr/Documents/projects/em_chat/client/src/hooks/useUserMedia.ts":"15"},{"size":743,"mtime":1613125203657,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1613125203658,"results":"18","hashOfConfig":"17"},{"size":972,"mtime":1613125203656,"results":"19","hashOfConfig":"17"},{"size":393,"mtime":1613125203658,"results":"20","hashOfConfig":"17"},{"size":3189,"mtime":1613125203658,"results":"21","hashOfConfig":"17"},{"size":2019,"mtime":1613125203658,"results":"22","hashOfConfig":"17"},{"size":674,"mtime":1613125203657,"results":"23","hashOfConfig":"17"},{"size":2271,"mtime":1613125203657,"results":"24","hashOfConfig":"17"},{"size":622,"mtime":1613125203657,"results":"25","hashOfConfig":"17"},{"size":4069,"mtime":1613149760623,"results":"26","hashOfConfig":"17"},{"size":959,"mtime":1613125203657,"results":"27","hashOfConfig":"17"},{"size":1400,"mtime":1613125203657,"results":"28","hashOfConfig":"17"},{"size":995,"mtime":1613125203657,"results":"29","hashOfConfig":"17"},{"size":941,"mtime":1613125203657,"results":"30","hashOfConfig":"17"},{"size":756,"mtime":1613125203657,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1kle6le",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"/Users/mscbr/Documents/projects/em_chat/client/src/index.tsx",[],["68","69"],"/Users/mscbr/Documents/projects/em_chat/client/src/reportWebVitals.ts",[],"/Users/mscbr/Documents/projects/em_chat/client/src/App.tsx",[],"/Users/mscbr/Documents/projects/em_chat/client/src/theme/index.ts",[],"/Users/mscbr/Documents/projects/em_chat/client/src/pages/chat/index.tsx",["70","71","72","73"],"import React, { useState } from 'react';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport {\n  Grid,\n  Box,\n  GridItem,\n  Button,\n  Spinner,\n  Text,\n  useBreakpointValue\n} from '@chakra-ui/react';\n\nimport MessageInput from 'components/messageInput';\nimport MesageList from 'components/messageList';\nimport UserList from 'components/userList';\nimport VideoFeedback from 'components/videoFeedback';\nimport useLocalStorage from 'hooks/useLocalStorage';\nimport useChat from 'hooks/useChat';\n\ninterface Props {\n  modelStatus: null | 'loading' | 'success';\n}\n\nconst Chat: React.FC<Props> = ({ modelStatus }) => {\n  const [username, _, clearUsername] = useLocalStorage('username');\n  const [userId, __, clearUserId] = useLocalStorage('userId');\n  const { messages, sendMessage, users, transferDetections, error } = useChat(\n    username,\n    userId\n  );\n  const upSm = useBreakpointValue({ base: false, md: true });\n  const history = useHistory();\n\n  const [message, setMessage] = useState('');\n\n  if (error)\n    return (\n      <Box m={24}>\n        <h1>{error}</h1>\n        <button\n          onClick={() => {\n            clearUsername();\n            clearUserId();\n            history.push('/');\n          }}\n        >\n          GO BACK\n        </button>\n      </Box>\n    );\n  if (!username || !userId) return <Redirect to=\"/login\" />;\n\n  const handleSendMessage = () => {\n    if (message && sendMessage) sendMessage(message, username);\n    setMessage('');\n  };\n\n  return (\n    <Grid\n      textStyle=\"basicText\"\n      h=\"100vh\"\n      templateColumns={upSm ? '1fr 2fr' : '1fr'}\n      templateRows=\"3fr 1fr 1fr\"\n      gap={1}\n      background=\"silver\"\n      border=\"8px solid\"\n      borderColor=\"silverMain\"\n      borderRadius={5}\n    >\n      <GridItem bg=\"surface\" p={8} display={!upSm ? 'none' : 'initial'}>\n        <Box display=\"flex\" alignItems=\"flex-end\">\n          <Button\n            onClick={() => {\n              clearUsername();\n              clearUserId();\n              history.push('/');\n            }}\n            mb={1}\n            h={8}\n            bg=\"transparent\"\n            border=\"1px solid white\"\n          >\n            â¬…\n          </Button>\n          <Text ml={4}>USERNAME: {username}</Text>\n        </Box>\n        <hr />\n        <UserList username={username} users={users || []} />\n      </GridItem>\n      <GridItem bg=\"surface\" rowSpan={2}>\n        <MesageList messages={messages || []} username={username} />\n      </GridItem>\n      <GridItem\n        bg=\"surface\"\n        p={8}\n        rowSpan={2}\n        display={!upSm ? 'none' : 'flex'}\n        flexDir=\"column\"\n        alignItems=\"center\"\n      >\n        {modelStatus === 'success' ? (\n          <VideoFeedback\n            username={username}\n            transferDetections={transferDetections}\n          />\n        ) : (\n          <Spinner />\n        )}\n      </GridItem>\n      <GridItem p={2} bg=\"surface\">\n        <MessageInput\n          value={message}\n          onChange={({ target: { value } }) => {\n            if (value[0] === '\\n') return;\n            setMessage(value);\n          }}\n          onSend={handleSendMessage}\n        />\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default Chat;\n","/Users/mscbr/Documents/projects/em_chat/client/src/pages/login/index.tsx",["74","75"],"import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  Center,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Input,\n  Button\n} from '@chakra-ui/react';\nimport { ArrowForwardIcon } from '@chakra-ui/icons';\n\nimport useLocalStorage from 'hooks/useLocalStorage';\n\nconst Login: React.FC = () => {\n  const [storage, setStorage] = useLocalStorage('username');\n  const [userId, setUserId] = useLocalStorage('userId');\n\n  const [username, setUsername] = useState('');\n  const [error, setError] = useState<string>('');\n\n  if (storage) return <Redirect to=\"/chat\" />;\n\n  const handleSubmit = () => {\n    const uuid = uuidv4();\n    if (uuid && username) {\n      setUserId(uuid);\n      setStorage(username);\n    } else {\n      setError('Valid username is required!');\n    }\n  };\n\n  return (\n    <Center\n      border=\"15px solid black\"\n      borderRadius={5}\n      h=\"100vh\"\n      w=\"100%\"\n      p=\"20%\"\n    >\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <FormControl id=\"username\">\n          <FormLabel>n i c k</FormLabel>\n          <Input\n            size=\"lg\"\n            value={username}\n            onChange={({ target: { value } }) => setUsername(value)}\n            onKeyDown={({ key }) => {\n              if (key === 'Enter') {\n                handleSubmit();\n              }\n            }}\n          />\n          <FormHelperText>enter your chat nick</FormHelperText>\n          {error && <FormErrorMessage>{error}</FormErrorMessage>}\n          <Button\n            onClick={handleSubmit}\n            mt={4}\n            variant=\"outline\"\n            border=\"2px\"\n            colorScheme=\"black\"\n            _hover={{\n              bg: '#c5c5c5',\n              borderColor: '#313131'\n            }}\n            rightIcon={<ArrowForwardIcon />}\n          >\n            ENTER\n          </Button>\n        </FormControl>\n      </form>\n    </Center>\n  );\n};\n\nexport default Login;\n","/Users/mscbr/Documents/projects/em_chat/client/src/hooks/useLocalStorage.ts",["76"],"import { useState } from 'react';\n\nexport default function useLocalStorage(key: string, initValue?: string) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item || initValue;\n    } catch (err) {\n      console.warn('Setting localStorage went wrong: ', err);\n      return initValue;\n    }\n  });\n\n  const setValue = (value: string) => {\n    window.localStorage.setItem(key, value);\n    setStoredValue(value);\n  };\n\n  const clearStorage = () => localStorage.removeItem(key);\n\n  return [storedValue, setValue, clearStorage] as [\n    string,\n    (value: string) => void,\n    () => void\n  ];\n}\n","/Users/mscbr/Documents/projects/em_chat/client/src/hooks/useChat.ts",[],"/Users/mscbr/Documents/projects/em_chat/client/src/components/userList/index.tsx",[],"/Users/mscbr/Documents/projects/em_chat/client/src/components/videoFeedback/index.tsx",["77"],"import React, { useCallback, useRef, useEffect, useState } from 'react';\nimport * as faceapi from 'face-api.js';\nimport { Spinner, Button, Text } from '@chakra-ui/react';\nimport { ViewIcon } from '@chakra-ui/icons';\n\nimport { useUserMedia } from 'hooks/useUserMedia';\nimport './index.css';\n\nconst CAPTURE_OPTIONS = {\n  audio: false,\n  video: { facingMode: 'user' }\n};\n\ninterface Props {\n  username: string;\n  transferDetections?: (\n    username: string,\n    data?: faceapi.WithFaceExpressions<{\n      detection: faceapi.FaceDetection;\n    }>[]\n  ) => void;\n}\n\nconst VideoFeedback: React.FC<Props> = ({ username, transferDetections }) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [context, setContext] = useState<CanvasRenderingContext2D>();\n  const [drawDet, setDrawDet] = useState(false);\n  const mediaStream = useUserMedia(CAPTURE_OPTIONS);\n\n  if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n    videoRef.current.srcObject = mediaStream as MediaStream;\n  }\n\n  const handleCanPlay = useCallback(() => {\n    videoRef.current?.play();\n  }, [videoRef]);\n  const handleDrawDet = useCallback(() => {\n    setDrawDet((state) => !state);\n  }, []);\n\n  useEffect(() => {\n    let renderDetection: NodeJS.Timeout;\n    if (videoRef.current && canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext('2d');\n      if (renderCtx) setContext(renderCtx);\n      if (context) {\n        faceapi.matchDimensions(canvasRef.current, {\n          width: canvasRef.current.width,\n          height: canvasRef.current.height\n        });\n        renderDetection = setInterval(async () => {\n          const detections = drawDet\n            ? await faceapi\n                .detectAllFaces(\n                  //@ts-expect-error\n                  videoRef.current,\n                  new faceapi.TinyFaceDetectorOptions()\n                )\n                .withFaceLandmarks()\n                .withFaceExpressions()\n            : await faceapi\n                .detectAllFaces(\n                  //@ts-expect-error\n                  videoRef.current,\n                  new faceapi.TinyFaceDetectorOptions()\n                )\n                .withFaceExpressions();\n          if (drawDet) {\n            const resizedDetections = faceapi.resizeResults(detections, {\n              //@ts-expect-error\n              width: canvasRef.current.width,\n              //@ts-expect-error\n              height: canvasRef.current.height\n            });\n            //@ts-expect-error\n            canvasRef.current.getContext('2d').clearRect(\n              0,\n              0,\n              //@ts-expect-error\n              canvasRef.current.width,\n              //@ts-expect-error\n              canvasRef.current.height\n            );\n            //@ts-expect-error\n            faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n            faceapi.draw.drawFaceLandmarks(\n              //@ts-expect-error\n              canvasRef.current,\n              resizedDetections\n            );\n            faceapi.draw.drawFaceExpressions(\n              //@ts-expect-error\n              canvasRef.current,\n              resizedDetections\n            );\n          }\n\n          if (transferDetections && detections) {\n            transferDetections(username, detections);\n          }\n        }, 100);\n      }\n\n      return () => clearInterval(renderDetection);\n    }\n  }, [videoRef.current, canvasRef.current, context, drawDet]);\n\n  return mediaStream ? (\n    <div id=\"video-wrapper\">\n      <Button\n        id=\"drawBtn\"\n        onClick={handleDrawDet}\n        border={drawDet ? '5px solid lime' : 'initial'}\n        opacity={drawDet ? 0.9 : 0.3}\n      >\n        <ViewIcon />\n      </Button>\n      <video\n        onCanPlay={handleCanPlay}\n        ref={videoRef}\n        id=\"video-stream\"\n        autoPlay\n        playsInline\n        muted\n      />\n      <canvas id=\"canvas\" ref={canvasRef} />\n      <Text>VIDEO FEEDBACK</Text>\n    </div>\n  ) : (\n    <Spinner />\n  );\n};\n\nexport default VideoFeedback;\n","/Users/mscbr/Documents/projects/em_chat/client/src/components/messageInput/index.tsx",[],"/Users/mscbr/Documents/projects/em_chat/client/src/components/messageList/index.tsx",[],"/Users/mscbr/Documents/projects/em_chat/client/src/components/userList/user.tsx",[],"/Users/mscbr/Documents/projects/em_chat/client/src/components/messageList/message.tsx",[],"/Users/mscbr/Documents/projects/em_chat/client/src/hooks/useUserMedia.ts",[],["78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":25,"column":20,"nodeType":"86","messageId":"87","endLine":25,"endColumn":21},{"ruleId":"88","severity":1,"message":"85","line":25,"column":20,"nodeType":"86","messageId":"87","endLine":25,"endColumn":21},{"ruleId":"84","severity":1,"message":"89","line":26,"column":18,"nodeType":"86","messageId":"87","endLine":26,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":26,"column":18,"nodeType":"86","messageId":"87","endLine":26,"endColumn":20},{"ruleId":"84","severity":1,"message":"90","line":19,"column":10,"nodeType":"86","messageId":"87","endLine":19,"endColumn":16},{"ruleId":"88","severity":1,"message":"90","line":19,"column":10,"nodeType":"86","messageId":"87","endLine":19,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":9,"column":7,"nodeType":"93","messageId":"94","endLine":9,"endColumn":19},{"ruleId":"95","severity":1,"message":"96","line":107,"column":6,"nodeType":"97","endLine":107,"endColumn":61,"suggestions":"98"},{"ruleId":"80","replacedBy":"99"},{"ruleId":"82","replacedBy":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'__' is assigned a value but never used.","'userId' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'transferDetections' and 'username'. Either include them or remove the dependency array. Mutable values like 'videoRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["103"],["101"],["102"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},"Update the dependencies array to be: [context, drawDet, transferDetections, username]",{"range":"106","text":"107"},[3441,3496],"[context, drawDet, transferDetections, username]"]